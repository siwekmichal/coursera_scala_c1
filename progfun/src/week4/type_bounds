"<: IntSet" - is an upper bound of the type of parametr S.

S <: T - S is a subtype of T
S >: T - S is a supertype of T, or T is a subtype of S


	
[S >: NonEmpty <: IntSet] - restrict S any type on the interval between NonEmpty and IntSet

NonEmpty <: IntSet
List[NonEmpty] <: List[IntSet] - covariant


THE LISCOV SUBSTITUTION PRINCIPLE
if A :< B, then everything one can to do with a value of type B one should also be able to do with a value of type A
Let q(x) be a property provable about object x of type B. Then q(y) should be provable for objects y of type A where A <: B.


List is covariant
Array is not covariant


A <: B
C[A] <: C[B]	- C is covariant
C[A] >: C[B]	- C is contravariant
neither C[A] nor C[B] is a subtype of the other		- C is nonvariant



	B		C[B]
	^		
	|		:> :< x
	|
	A		C[A]
	
class C[+A] { ... }		C is covariant
class C[-A] { ... }		C is contravariant
class C[A] { ... } 		C is nonvariant





type A = IntSet => NonEmpty
type B = NonEmpty => IntSet
then A <: B 

IF A2 <: A1 and B1 <: B2, THEN
A1 => B1  <: A2 => B2


A2	=>	B2
/\		..
..		\/
A1	=>	B1


package scala
trait Function1[-T, +U] {
	def apply(x: T) : U
}

VARIANCE CHECKS
covariant type parameters can only appear in method result
contravariant type parameters can only appear in method parameters
invariant type parameters can appear anywhere.

package scala
trait Function1[-T, +U] {
	def apply(x: T) : U
}	
